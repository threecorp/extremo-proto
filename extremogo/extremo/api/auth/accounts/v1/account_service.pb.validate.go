// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: extremo/api/auth/accounts/v1/account_service.proto

package accounts

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := RegisterRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRawPassword()); l < 8 || l > 255 {
		err := RegisterRequestValidationError{
			field:  "RawPassword",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetConfirmPassword()); l < 8 || l > 255 {
		err := RegisterRequestValidationError{
			field:  "ConfirmPassword",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetElement() == nil {
		err := RegisterResponseValidationError{
			field:  "Element",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetElement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "Element",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "Element",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetElement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterResponseValidationError{
				field:  "Element",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on UnregisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnregisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterRequestMultiError, or nil if none found.
func (m *UnregisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPk() <= 0 {
		err := UnregisterRequestValidationError{
			field:  "Pk",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := UnregisterRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UnregisterRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnregisterRequestMultiError(errors)
	}

	return nil
}

func (m *UnregisterRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UnregisterRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UnregisterRequestMultiError is an error wrapping multiple validation errors
// returned by UnregisterRequest.ValidateAll() if the designated constraints
// aren't met.
type UnregisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterRequestMultiError) AllErrors() []error { return m }

// UnregisterRequestValidationError is the validation error returned by
// UnregisterRequest.Validate if the designated constraints aren't met.
type UnregisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterRequestValidationError) ErrorName() string {
	return "UnregisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterRequestValidationError{}

// Validate checks the field values on ConfirmEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmEmailRequestMultiError, or nil if none found.
func (m *ConfirmEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := ConfirmEmailRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ConfirmEmailRequest_Key_Pattern.MatchString(m.GetKey()) {
		err := ConfirmEmailRequestValidationError{
			field:  "Key",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfirmEmailRequestMultiError(errors)
	}

	return nil
}

// ConfirmEmailRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmEmailRequestMultiError) AllErrors() []error { return m }

// ConfirmEmailRequestValidationError is the validation error returned by
// ConfirmEmailRequest.Validate if the designated constraints aren't met.
type ConfirmEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmEmailRequestValidationError) ErrorName() string {
	return "ConfirmEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmEmailRequestValidationError{}

var _ConfirmEmailRequest_Key_Pattern = regexp.MustCompile("^[A-Za-z0-9]+$")

// Validate checks the field values on EmailExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailExistsRequestMultiError, or nil if none found.
func (m *EmailExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := EmailExistsRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = EmailExistsRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmailExistsRequestMultiError(errors)
	}

	return nil
}

func (m *EmailExistsRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailExistsRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailExistsRequestMultiError is an error wrapping multiple validation errors
// returned by EmailExistsRequest.ValidateAll() if the designated constraints
// aren't met.
type EmailExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailExistsRequestMultiError) AllErrors() []error { return m }

// EmailExistsRequestValidationError is the validation error returned by
// EmailExistsRequest.Validate if the designated constraints aren't met.
type EmailExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailExistsRequestValidationError) ErrorName() string {
	return "EmailExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmailExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailExistsRequestValidationError{}

// Validate checks the field values on AccountExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountExistsRequestMultiError, or nil if none found.
func (m *AccountExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := AccountExistsRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AccountExistsRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 255 {
		err := AccountExistsRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccountExistsRequestMultiError(errors)
	}

	return nil
}

func (m *AccountExistsRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AccountExistsRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AccountExistsRequestMultiError is an error wrapping multiple validation
// errors returned by AccountExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountExistsRequestMultiError) AllErrors() []error { return m }

// AccountExistsRequestValidationError is the validation error returned by
// AccountExistsRequest.Validate if the designated constraints aren't met.
type AccountExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountExistsRequestValidationError) ErrorName() string {
	return "AccountExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountExistsRequestValidationError{}

// Validate checks the field values on GetAccountByTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByTokenRequestMultiError, or nil if none found.
func (m *GetAccountByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 10 {
		err := GetAccountByTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountByTokenRequestMultiError(errors)
	}

	return nil
}

// GetAccountByTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountByTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByTokenRequestMultiError) AllErrors() []error { return m }

// GetAccountByTokenRequestValidationError is the validation error returned by
// GetAccountByTokenRequest.Validate if the designated constraints aren't met.
type GetAccountByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByTokenRequestValidationError) ErrorName() string {
	return "GetAccountByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByTokenRequestValidationError{}

// Validate checks the field values on SpoofLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpoofLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpoofLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpoofLoginRequestMultiError, or nil if none found.
func (m *SpoofLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpoofLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPk() <= 0 {
		err := SpoofLoginRequestValidationError{
			field:  "Pk",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SpoofLoginRequestMultiError(errors)
	}

	return nil
}

// SpoofLoginRequestMultiError is an error wrapping multiple validation errors
// returned by SpoofLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type SpoofLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpoofLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpoofLoginRequestMultiError) AllErrors() []error { return m }

// SpoofLoginRequestValidationError is the validation error returned by
// SpoofLoginRequest.Validate if the designated constraints aren't met.
type SpoofLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpoofLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpoofLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpoofLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpoofLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpoofLoginRequestValidationError) ErrorName() string {
	return "SpoofLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpoofLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpoofLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpoofLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpoofLoginRequestValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := LoginRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 255 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

func (m *LoginRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on CookieRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CookieRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CookieRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CookieRequestMultiError, or
// nil if none found.
func (m *CookieRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CookieRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CookieRequestMultiError(errors)
	}

	return nil
}

// CookieRequestMultiError is an error wrapping multiple validation errors
// returned by CookieRequest.ValidateAll() if the designated constraints
// aren't met.
type CookieRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CookieRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CookieRequestMultiError) AllErrors() []error { return m }

// CookieRequestValidationError is the validation error returned by
// CookieRequest.Validate if the designated constraints aren't met.
type CookieRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CookieRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CookieRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CookieRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CookieRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CookieRequestValidationError) ErrorName() string { return "CookieRequestValidationError" }

// Error satisfies the builtin error interface
func (e CookieRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCookieRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CookieRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CookieRequestValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 10 {
		err := LogoutRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on ResetPasswordMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordMailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordMailRequestMultiError, or nil if none found.
func (m *ResetPasswordMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := ResetPasswordMailRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = ResetPasswordMailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordMailRequestMultiError(errors)
	}

	return nil
}

func (m *ResetPasswordMailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ResetPasswordMailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ResetPasswordMailRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordMailRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordMailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordMailRequestMultiError) AllErrors() []error { return m }

// ResetPasswordMailRequestValidationError is the validation error returned by
// ResetPasswordMailRequest.Validate if the designated constraints aren't met.
type ResetPasswordMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordMailRequestValidationError) ErrorName() string {
	return "ResetPasswordMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordMailRequestValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := ResetPasswordRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResetPasswordRequest_Key_Pattern.MatchString(m.GetKey()) {
		err := ResetPasswordRequestValidationError{
			field:  "Key",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRawPassword()); l < 8 || l > 255 {
		err := ResetPasswordRequestValidationError{
			field:  "RawPassword",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetConfirmPassword()); l < 8 || l > 255 {
		err := ResetPasswordRequestValidationError{
			field:  "ConfirmPassword",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

var _ResetPasswordRequest_Key_Pattern = regexp.MustCompile("^[A-Za-z0-9]+$")

// Validate checks the field values on ConfirmInvitationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmInvitationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmInvitationRequestMultiError, or nil if none found.
func (m *ConfirmInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := ConfirmInvitationRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ConfirmInvitationRequest_Key_Pattern.MatchString(m.GetKey()) {
		err := ConfirmInvitationRequestValidationError{
			field:  "Key",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfirmInvitationRequestMultiError(errors)
	}

	return nil
}

// ConfirmInvitationRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmInvitationRequestMultiError) AllErrors() []error { return m }

// ConfirmInvitationRequestValidationError is the validation error returned by
// ConfirmInvitationRequest.Validate if the designated constraints aren't met.
type ConfirmInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmInvitationRequestValidationError) ErrorName() string {
	return "ConfirmInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmInvitationRequestValidationError{}

var _ConfirmInvitationRequest_Key_Pattern = regexp.MustCompile("^[A-Za-z0-9]+$")

// Validate checks the field values on RegisterByInvitationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterByInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterByInvitationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterByInvitationRequestMultiError, or nil if none found.
func (m *RegisterByInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterByInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := RegisterByInvitationRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterByInvitationRequest_Key_Pattern.MatchString(m.GetKey()) {
		err := RegisterByInvitationRequestValidationError{
			field:  "Key",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRawPassword()); l < 8 || l > 255 {
		err := RegisterByInvitationRequestValidationError{
			field:  "RawPassword",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetConfirmPassword()); l < 8 || l > 255 {
		err := RegisterByInvitationRequestValidationError{
			field:  "ConfirmPassword",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterByInvitationRequestMultiError(errors)
	}

	return nil
}

// RegisterByInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterByInvitationRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterByInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterByInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterByInvitationRequestMultiError) AllErrors() []error { return m }

// RegisterByInvitationRequestValidationError is the validation error returned
// by RegisterByInvitationRequest.Validate if the designated constraints
// aren't met.
type RegisterByInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterByInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterByInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterByInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterByInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterByInvitationRequestValidationError) ErrorName() string {
	return "RegisterByInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterByInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterByInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterByInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterByInvitationRequestValidationError{}

var _RegisterByInvitationRequest_Key_Pattern = regexp.MustCompile("^[A-Za-z0-9]+$")
