//
// README: https://cloud.google.com/apis/design/standard_methods
//

syntax = "proto3";

package extremo.api.mypage.books.v1;

// import "extremo/msg/api/v1/api.proto";
import "extremo/msg/db/v1/db.proto";
import "extremo/msg/db/v1/enum.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/field_mask.proto";
import "validate/validate.proto"; // XXX: https://github.com/envoyproxy/protoc-gen-validate

option go_package = "github.com/threecorp/extremo-proto/extremogo/extremo/api/mypage/books/v1;books";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "BookServiceProto";
option java_package = "com.extremo.api.mypage.books.v1";

//
// README: https://cloud.google.com/apis/design/standard_methods
// Service for reading from and writing to existing Books.
//
service BookService {
  // Delete deletes a Book with return nothing
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/mypage/v1/{tenant_fk}/books/{pk}"};
  }
  // Get returns a book
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {get: "/api/mypage/v1/{tenant_fk}/books/{pk}"};
  }
  // List returns Books as list with pagination
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {get: "/api/mypage/v1/{tenant_fk}/books"};
  }
  // Update updates a Book with then return a Book
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put: "/api/mypage/v1/{tenant_fk}/books/{pk}"
      body: "*"
    };
  }
  // Create creates a Book with then return a Book
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/mypage/v1/{tenant_fk}/books"
      body: "*"
    };
  }
  // // CreateImage creates a image
  // rpc CreateImage(CreateImageRequest) returns (CreateImageResponse) {
  //   option (google.api.http) = {
  //     post: "/api/mypage/v1/{tenant_fk}/books/{book_fk}/image"
  //     body: "*"
  //   };
  // }
  // // UpdateImage creates a image
  // rpc UpdateImage(UpdateImageRequest) returns (UpdateImageResponse) {
  //   option (google.api.http) = {
  //     put: "/api/mypage/v1/{tenant_fk}/books/{book_fk}/image/{pk}"
  //     body: "*"
  //   };
  // }
}

message ListBooksRequest {
  // Behaves as like GraphQL Field Selector
  // google.protobuf.FieldMask field_mask = 1999;
  //
  // Tenant FK
  int32 tenant_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // page number
  int32 page = 2 [(validate.rules).int32 = {gt: 0}];
  // The maximum number of items to return.
  int32 page_size = 3 [(validate.rules).int32 = {
    gt: 0
    lte: 30
  }];
}

message ListBooksResponse {
  // article msg.db
  repeated extremo.msg.db.v1.Book elements = 1 [(validate.rules).repeated = {
    min_items: 0
    max_items: 30
  }];
  // Total Size
  int32 total_size = 2 [(validate.rules).int32 = {gte: 0}];
}

message ListRequest {
  // Behaves as like GraphQL Field Selector
  // google.protobuf.FieldMask field_mask = 1999;
  //
  // Tenant FK
  int32 tenant_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // page number
  int32 page = 2 [(validate.rules).int32 = {gt: 0}];
  // The maximum number of items to return.
  int32 page_size = 3 [(validate.rules).int32 = {
    gt: 0
    lte: 30
  }];
}

message ListResponse {
  // article msg.db
  repeated extremo.msg.db.v1.Book elements = 1 [(validate.rules).repeated = {
    min_items: 0
    max_items: 30
  }];
  // Total Size
  int32 total_size = 2 [(validate.rules).int32 = {gte: 0}];
}

message GetRequest {
  // Behaves as like GraphQL Field Selector
  // google.protobuf.FieldMask field_mask = 1999;
  //
  // Tenant FK
  int32 tenant_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // Relation Key
  int32 pk = 2 [(validate.rules).int32 = {gt: 0}];
}

message GetResponse {
  // A book book. if request book is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.Book element = 1 [(validate.rules).message = {required: true}];
}

// PrimaryKey is set by JWT Token
message CreateRequest {
  // Tenant FK
  int32 tenant_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // name of book
  string name = 2 [(validate.rules).string = {
    min_len: 0
    max_len: 255
  }];
  // description of book
  string desc = 3 [(validate.rules).string = {
    min_len: 0
    max_len: 255
  }];
  // Relation Keys: users.id for CLIENT
  repeated int32 client_fks = 4 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {gt: 0}
    }
  }];
  // Relation Keys
  repeated int32 team_fks = 5 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {gt: 0}
    }
  }];
  // Relation Keys
  repeated int32 service_fks = 6 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {gt: 0}
    }
  }];
}

message CreateResponse {
  // A book book. if request book is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.Book element = 1 [(validate.rules).message = {required: true}];
}

message UpdateRequest {
  // Tenant FK
  int32 tenant_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // PK
  int32 pk = 2 [(validate.rules).int32 = {gt: 0}];
  // name of book
  string name = 3 [(validate.rules).string = {
    min_len: 0
    max_len: 255
  }];
  // description of book
  string desc = 4 [(validate.rules).string = {
    min_len: 0
    max_len: 255
  }];
  // status filter which allows NONE
  extremo.msg.db.v1.BookEnum.Status status = 5 [(validate.rules).enum = {not_in: 0}];
  // Relation Keys: users.id for CLIENT
  repeated int32 client_fks = 6 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {gt: 0}
    }
  }];
  // Relation Key
  repeated int32 team_fks = 7 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {gt: 0}
    }
  }];
  // Relation Key
  repeated int32 service_fks = 8 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {gt: 0}
    }
  }];
}

message UpdateResponse {
  // A book message. if request book is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.Book element = 1 [(validate.rules).message = {required: true}];
}

message DeleteRequest {
  // Tenant FK
  int32 tenant_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // Primary Key is confirmed by JWT Token
  int32 pk = 2 [(validate.rules).int32 = {gt: 0}];
}

// message CreateImageRequest {
//   // XXX: Relation Key is checked correct value by JWT Token
//   int32 book_fk = 1 [(validate.rules).int32 = {gt: 0}];
//   // kind cannot be NONE (0)
//   extremo.msg.db.v1.BookImageEnum.Kind kind = 2 [(validate.rules).enum = {
//     not_in: [0]
//   }];
//   // image Data URI: 10B ~ 20MB
//   string image = 3 [(validate.rules).string = {
//     min_bytes: 10
//     max_bytes: 25000000
//     prefix: "data:image/"
//     contains: ";base64,"
//   }]; // "data:image/tiff;base64,",
//   // name
//   string name = 4 [(validate.rules).string = {
//     min_len: 0
//     max_len: 255
//   }];
// }

// message CreateImageResponse {
//   // A book book. if request book is not published, it filtered them. so response might be empty.
//   extremo.msg.db.v1.BookImage element = 1 [(validate.rules).message = {required: true}];
// }
//
// message UpdateImageRequest {
//   // XXX: PrimaryKey is checked correct value by JWT Token
//   int32 pk = 5 [(validate.rules).int32 = {gt: 0}];
//   // XXX: Relation Key is checked correct value by JWT Token
//   int32 book_fk = 1 [(validate.rules).int32 = {gt: 0}];
//   // kind cannot be NONE (0)
//   extremo.msg.db.v1.BookImageEnum.Kind kind = 2 [(validate.rules).enum = {
//     not_in: [0]
//   }];
//   // image Data URI: 10B ~ 20MB
//   string image = 3 [(validate.rules).string = {
//     min_bytes: 10
//     max_bytes: 25000000
//     prefix: "data:image/"
//     contains: ";base64,"
//   }]; // "data:image/tiff;base64,",
//   // name
//   string name = 4 [(validate.rules).string = {
//     min_len: 0
//     max_len: 255
//   }];
// }
//
// message UpdateImageResponse {
//   // A book message. if request book is not published, it filtered them. so response might be empty.
//   extremo.msg.db.v1.BookImage element = 1 [(validate.rules).message = {required: true}];
// }
