//
// README: https://cloud.google.com/apis/design/standard_methods
//

syntax = "proto3";

package extremo.api.mypage.artifacts.v1;

// import "extremo/msg/api/v1/api.proto";
import "extremo/msg/db/v1/db.proto";
import "extremo/msg/db/v1/enum.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/field_mask.proto";
import "validate/validate.proto"; // XXX: https://github.com/envoyproxy/protoc-gen-validate

option go_package = "github.com/threecorp/extremo-proto/extremogo/extremo/api/mypage/artifacts/v1;artifacts";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ArtifactServiceProto";
option java_package = "com.extremo.api.mypage.artifacts.v1";

//
// README: https://cloud.google.com/apis/design/standard_methods
// Service for reading from and writing to existing Artifacts.
//
service ArtifactService {
  // Update updates a Artifact with then return a Artifact
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put: "/api/mypage/v1/artifacts/{pk}"
      body: "*"
    };
  }
  // Delete deletes a Artifact with return nothing
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/mypage/v1/artifacts/{pk}"};
  }
  // Get returns a artifact
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {get: "/api/mypage/v1/artifacts/{pk}"};
  }
  // List returns Artifacts as list with pagination
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {get: "/api/mypage/v1/artifacts"};
  }
  // Create creates a Artifact with then return a Artifact
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/mypage/v1/artifacts"
      body: "*"
    };
  }
  // CreateImage creates a image
  rpc CreateImage(CreateImageRequest) returns (CreateImageResponse) {
    option (google.api.http) = {
      post: "/api/mypage/v1/artifacts/{artifact_fk}/image"
      body: "*"
    };
  }
  // UpdateImage creates a image
  rpc UpdateImage(UpdateImageRequest) returns (UpdateImageResponse) {
    option (google.api.http) = {
      put: "/api/mypage/v1/artifacts/{artifact_fk}/image/{pk}"
      body: "*"
    };
  }
}

message ListRequest {
  // Behaves as like GraphQL Field Selector
  // google.protobuf.FieldMask field_mask = 1999;
  //
  // page number
  int32 page = 2 [(validate.rules).int32 = {gt: 0}];
  // The maximum number of items to return.
  int32 page_size = 3 [(validate.rules).int32 = {
    gt: 0
    lte: 30
  }];
}

message ListResponse {
  // article msg.db
  repeated extremo.msg.db.v1.Artifact elements = 1 [(validate.rules).repeated = {
    min_items: 0
    max_items: 30
  }];
  // Total Size
  int32 total_size = 2 [(validate.rules).int32 = {gte: 0}];
}

message GetRequest {
  // Behaves as like GraphQL Field Selector
  // google.protobuf.FieldMask field_mask = 1999;
  // Relation Key
  int32 pk = 1 [(validate.rules).int32 = {gt: 0}];
}

message GetResponse {
  // A artifact message. if request artifact is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.Artifact element = 1 [(validate.rules).message = {required: true}];
}

// PrimaryKey is set by JWT Token
message CreateRequest {
  // Artifact Title
  string title = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  // Artifact content text NOT NULL
  string content = 2;
  // Artifact summary varchar(2048) NOT NULL DEFAULT ''
  string summary = 3;
  // public or private
  bool is_published = 4;
  // start
  google.protobuf.Timestamp publish_from = 5 [(validate.rules).timestamp = {required: false}];
  // until
  google.protobuf.Timestamp publish_until = 6 [(validate.rules).timestamp = {required: false}];
  // artifact_images table: datauri
  // string thumb = 7 [
  //   (validate.rules).string = {
  //     min_bytes: 10
  //     max_bytes: 25000000
  //     prefix: "data:image/"
  //     contains: ";base64,"
  //   }
  // ];
}

message CreateResponse {
  // A user message. if request user is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.Artifact element = 1 [(validate.rules).message = {required: true}];
}

message UpdateRequest {
  // Primary Key is confirmed by JWT Token
  int32 pk = 1 [(validate.rules).int32 = {gt: 0}];
  // Artifact Title
  string title = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  // Artifact content text NOT NULL
  string content = 3;
  // Artifact summary varchar(1023) NOT NULL DEFAULT ''
  string summary = 4;
  // public or private
  bool is_published = 5;
  // start
  google.protobuf.Timestamp publish_from = 6 [(validate.rules).timestamp = {required: false}];
  // until
  google.protobuf.Timestamp publish_until = 7 [(validate.rules).timestamp = {required: false}];
  // artifact_images table: datauri
  // string thumb = 8 [
  //   (validate.rules).string = {
  //     min_bytes: 10
  //     max_bytes: 25000000
  //     prefix: "data:image/"
  //     contains: ";base64,"
  //   }
  // ];
}

message UpdateResponse {
  // A user message. if request user is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.Artifact element = 1 [(validate.rules).message = {required: true}];
}

message DeleteRequest {
  // Primary Key is confirmed by JWT Token
  int32 pk = 1 [(validate.rules).int32 = {gt: 0}];
}

message CreateImageRequest {
  // XXX: Relation Key is checked correct value by JWT Token
  int32 artifact_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // kind cannot be NONE (0)
  extremo.msg.db.v1.ArtifactImageEnum.Kind kind = 2 [(validate.rules).enum = {
    not_in: [0]
  }];
  // image Data URI: 10B ~ 20MB
  string image = 3 [(validate.rules).string = {
    min_bytes: 10
    max_bytes: 25000000
    prefix: "data:image/"
    contains: ";base64,"
  }]; // "data:image/tiff;base64,",
  // name
  string name = 4 [(validate.rules).string = {
    min_len: 0
    max_len: 255
  }];
}

message CreateImageResponse {
  // A user message. if request user is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.ArtifactImage element = 1 [(validate.rules).message = {required: true}];
}

message UpdateImageRequest {
  // XXX: PrimaryKey is checked correct value by JWT Token
  int32 pk = 5 [(validate.rules).int32 = {gt: 0}];
  // XXX: Relation Key is checked correct value by JWT Token
  int32 artifact_fk = 1 [(validate.rules).int32 = {gt: 0}];
  // kind cannot be NONE (0)
  extremo.msg.db.v1.ArtifactImageEnum.Kind kind = 2 [(validate.rules).enum = {
    not_in: [0]
  }];
  // image Data URI: 10B ~ 20MB
  string image = 3 [(validate.rules).string = {
    min_bytes: 10
    max_bytes: 25000000
    prefix: "data:image/"
    contains: ";base64,"
  }]; // "data:image/tiff;base64,",
  // name
  string name = 4 [(validate.rules).string = {
    min_len: 0
    max_len: 255
  }];
}

message UpdateImageResponse {
  // A user message. if request user is not published, it filtered them. so response might be empty.
  extremo.msg.db.v1.ArtifactImage element = 1 [(validate.rules).message = {required: true}];
}
